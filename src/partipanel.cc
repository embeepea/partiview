// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "partipanel.H"
#include "partiview.H"

Fl_Menu_Item menu_ppui[] = {
 {"inertia", 0,  (Fl_Callback*)pp_inertia_on_cb, 0, 2, FL_NORMAL_LABEL, 0, 12, 3},
 {"H-R Diagram", 0,  (Fl_Callback*)pp_hrdiag_on_cb, 0, 2, FL_NORMAL_LABEL, 0, 14, 3},
 {0,0,0,0,0,0,0,0,0}
};

static void cb_ppui(Fl_Light_Button* o, struct stuff **) {
  specks_commandfmt( &ppui.st, "points %d", o->value());
}

static void cb_ppui1(Fl_Light_Button* o, struct stuff **) {
  specks_commandfmt( &ppui.st, "polygons %d",
  o->value() );
}

static void cb_ppui2(Fl_Light_Button* o, struct stuff **) {
  specks_commandfmt(&ppui.st, "label %d", o->value());
}

static void cb_ppui3(Fl_Light_Button* o, struct stuff **) {
  specks_commandfmt( &ppui.st, "texture %d",o->value());
}

static void cb_ppui4(Fl_Light_Button* o, struct stuff **) {
  specks_commandfmt( &ppui.st,
   "boxes %d",
   Fl::event_state(FL_CTRL)?2: o->value());
}

static void cb_Boxes(Fl_Menu_Button* o, void*) {
  specks_commandfmt(&ppui.st, "%s", o->text());
}

static void cb_ppui5(Fl_Button* o, struct stuff **) {
  char homestr[120];
sprintf(homestr, "home %g %g %g  %g %g %g  (XYZ RxRyRz)", ppui.home[0], ppui.home[1], ppui.home[2], ppui.home[3], ppui.home[4], ppui.home[5]);
specks_commandfmt( &ppui.st, homestr, o->value());
}

Fl_Menu_Button *playmenu=(Fl_Menu_Button *)0;

static void cb_playmenu(Fl_Menu_Button* o, void*) {
  specks_commandfmt(&ppui.st,"%s",o->text());
}

Fl_Button *editbtn=(Fl_Button *)0;

Fl_Double_Window* make_window() {
  { Fl_Double_Window* o = ppui.mainwin = new Fl_Double_Window(540, 465);
    ppui.mainwin->box(FL_DOWN_BOX);
    ppui.mainwin->color((Fl_Color)96);
    { Fl_Pack* o = new Fl_Pack(0, 0, 540, 466);
      o->color((Fl_Color)96);
      { ppui.toprow = new Fl_Group(0, 0, 540, 37);
        { ppui.more = new Fl_Menu_Button(0, 0, 30, 20, "More");
          ppui.more->color((Fl_Color)137);
          ppui.more->selection_color(FL_INACTIVE_COLOR);
          ppui.more->labelsize(12);
          ppui.more->labelcolor((Fl_Color)3);
          ppui.more->align(Fl_Align(FL_ALIGN_BOTTOM));
          { Fl_Menu_Item* o = &menu_ppui[0];
            ppui.inertiaon = o;
          }
          { Fl_Menu_Item* o = &menu_ppui[1];
            ppui.hrdiagon = o;
          }
          ppui.more->menu(menu_ppui);
        } // Fl_Menu_Button* ppui.more
        { Fl_Group* o = new Fl_Group(28, 0, 30, 34);
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)96);
          { ppui.obj = new Fl_Menu_Button(33, 0, 25, 20, "[gN]");
            ppui.obj->color((Fl_Color)137);
            ppui.obj->labelsize(12);
            ppui.obj->labelcolor((Fl_Color)3);
            ppui.obj->callback((Fl_Callback*)pp_obj_cb);
            ppui.obj->align(Fl_Align(FL_ALIGN_BOTTOM));
          } // Fl_Menu_Button* ppui.obj
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(58, 0, 40, 34);
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)96);
          { ppui.nav = new Fl_Menu_Button(63, 0, 32, 20, "Navi  ");
            ppui.nav->color((Fl_Color)137);
            ppui.nav->labelsize(12);
            ppui.nav->labelcolor((Fl_Color)3);
            ppui.nav->textsize(12);
            ppui.nav->callback((Fl_Callback*)pp_nav_cb, (void*)(&ppui.st));
            ppui.nav->align(Fl_Align(FL_ALIGN_BOTTOM));
          } // Fl_Menu_Button* ppui.nav
          o->end();
        } // Fl_Group* o
        { ppui.objgroup = new Fl_Group(98, 0, 441, 37);
          { ppui.point = new Fl_Light_Button(106, 0, 20, 20, "point ");
            ppui.point->color((Fl_Color)35);
            ppui.point->selection_color((Fl_Color)2);
            ppui.point->labelsize(12);
            ppui.point->labelcolor((Fl_Color)3);
            ppui.point->callback((Fl_Callback*)cb_ppui, (void*)(&ppui.st));
            ppui.point->align(Fl_Align(FL_ALIGN_BOTTOM));
            ppui.point->when(FL_WHEN_CHANGED);
          } // Fl_Light_Button* ppui.point
          { ppui.poly = new Fl_Light_Button(133, 0, 20, 20, "poly");
            ppui.poly->color((Fl_Color)35);
            ppui.poly->selection_color((Fl_Color)2);
            ppui.poly->labelsize(12);
            ppui.poly->labelcolor((Fl_Color)3);
            ppui.poly->callback((Fl_Callback*)cb_ppui1, (void*)(&ppui.st));
            ppui.poly->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
            ppui.poly->when(FL_WHEN_CHANGED);
          } // Fl_Light_Button* ppui.poly
          { ppui.label = new Fl_Light_Button(161, 0, 20, 20, "lbl");
            ppui.label->color((Fl_Color)35);
            ppui.label->selection_color((Fl_Color)2);
            ppui.label->labelsize(12);
            ppui.label->labelcolor((Fl_Color)3);
            ppui.label->callback((Fl_Callback*)cb_ppui2, (void*)(&ppui.st));
            ppui.label->align(Fl_Align(FL_ALIGN_BOTTOM));
            ppui.label->when(FL_WHEN_CHANGED);
          } // Fl_Light_Button* ppui.label
          { ppui.texture = new Fl_Light_Button(188, 0, 20, 20, "tex");
            ppui.texture->color((Fl_Color)35);
            ppui.texture->selection_color((Fl_Color)2);
            ppui.texture->labelsize(12);
            ppui.texture->labelcolor((Fl_Color)3);
            ppui.texture->callback((Fl_Callback*)cb_ppui3, (void*)(&ppui.st));
            ppui.texture->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
            ppui.texture->when(FL_WHEN_CHANGED);
          } // Fl_Light_Button* ppui.texture
          { ppui.box = new Fl_Light_Button(216, 0, 20, 20, "box");
            ppui.box->color((Fl_Color)35);
            ppui.box->selection_color((Fl_Color)2);
            ppui.box->labelsize(12);
            ppui.box->labelcolor((Fl_Color)3);
            ppui.box->callback((Fl_Callback*)cb_ppui4, (void*)(&ppui.st));
            ppui.box->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
            ppui.box->when(FL_WHEN_CHANGED);
          } // Fl_Light_Button* ppui.box
          { Fl_Menu_Button* o = new Fl_Menu_Button(216, 0, 20, 20, "Boxes");
            o->type(4);
            o->callback((Fl_Callback*)cb_Boxes);
            o->add("boxes off|boxes on|boxes ONLY");
          } // Fl_Menu_Button* o
          { ppui.homejump = new Fl_Button(245, 0, 20, 20, "home");
            ppui.homejump->color((Fl_Color)35);
            ppui.homejump->selection_color((Fl_Color)34);
            ppui.homejump->labelsize(12);
            ppui.homejump->labelcolor((Fl_Color)3);
            ppui.homejump->callback((Fl_Callback*)cb_ppui5, (void*)(&ppui.st));
            ppui.homejump->align(Fl_Align(FL_ALIGN_BOTTOM));
          } // Fl_Button* ppui.homejump
          { ppui.slidergroup = new Fl_Group(270, 0, 268, 35);
            ppui.slidergroup->box(FL_FLAT_BOX);
            ppui.slidergroup->color((Fl_Color)96);
            ppui.slidergroup->when(FL_WHEN_CHANGED);
            { ppui.sldtype = new Fl_Menu_Button(275, 0, 22, 20, "slum");
              ppui.sldtype->tooltip("menu for choosing type of slider");
              ppui.sldtype->box(FL_DOWN_BOX);
              ppui.sldtype->color(FL_SELECTION_COLOR);
              ppui.sldtype->selection_color((Fl_Color)35);
              ppui.sldtype->labelsize(12);
              ppui.sldtype->labelcolor((Fl_Color)3);
              ppui.sldtype->textsize(12);
              ppui.sldtype->textcolor((Fl_Color)35);
              ppui.sldtype->callback((Fl_Callback*)pp_sldtype_cb);
              ppui.sldtype->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
            } // Fl_Menu_Button* ppui.sldtype
            { ppui.slum = new Fl_Value_Slider(327, 0, 211, 20, "log slum");
              ppui.slum->type(5);
              ppui.slum->color((Fl_Color)35);
              ppui.slum->selection_color((Fl_Color)4);
              ppui.slum->labelsize(12);
              ppui.slum->labelcolor((Fl_Color)3);
              ppui.slum->minimum(-3);
              ppui.slum->maximum(4.5);
              ppui.slum->step(0.025);
              ppui.slum->textcolor((Fl_Color)3);
              ppui.slum->callback((Fl_Callback*)pp_slum_cb, (void*)(&ppui.st));
            } // Fl_Value_Slider* ppui.slum
            { ppui.genericslider = new Fl_Value_Slider(327, 0, 211, 20, "generic slider");
              ppui.genericslider->type(5);
              ppui.genericslider->color((Fl_Color)35);
              ppui.genericslider->selection_color((Fl_Color)4);
              ppui.genericslider->labelsize(12);
              ppui.genericslider->labelcolor((Fl_Color)3);
              ppui.genericslider->minimum(-3);
              ppui.genericslider->maximum(4.5);
              ppui.genericslider->step(0.025);
              ppui.genericslider->textcolor((Fl_Color)3);
              ppui.genericslider->callback((Fl_Callback*)pp_genericslider_cb);
              ppui.genericslider->when(3);
              ppui.genericslider->hide();
              Fl_Group::current()->resizable(ppui.genericslider);
            } // Fl_Value_Slider* ppui.genericslider
            { Fl_Button* o = ppui.linlog = new Fl_Button(297, 0, 30, 20, "log");
              ppui.linlog->down_box(FL_DOWN_BOX);
              ppui.linlog->color(FL_DARK_BLUE);
              ppui.linlog->selection_color(FL_DARK_BLUE);
              ppui.linlog->labelsize(12);
              ppui.linlog->labelcolor((Fl_Color)3);
              ppui.linlog->callback((Fl_Callback*)pp_linlog_cb);
              ppui.linlog->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
              o->value(0); //initially slum slider is visible
              o->type(FL_TOGGLE_BUTTON);
            } // Fl_Button* ppui.linlog
            //steven marx: version 0.7.02
            ppui.slidergroup->end();
            Fl_Group::current()->resizable(ppui.slidergroup);
          } // Fl_Group* ppui.slidergroup
          ppui.objgroup->end();
          Fl_Group::current()->resizable(ppui.objgroup);
        } // Fl_Group* ppui.objgroup
        ppui.toprow->end();
      } // Fl_Group* ppui.toprow
      { Fl_Scroll_Thin* o = new Fl_Scroll_Thin(0, 40, 540, 29);
        o->type(1);
        o->box(FL_NO_BOX);
        o->color((Fl_Color)96);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->align(Fl_Align(FL_ALIGN_TOP));
        o->when(FL_WHEN_RELEASE);
        o->hide();
        { Fl_Pack* o = ppui.objtogs = new Fl_Pack(1, 40, 473, 22);
          ppui.objtogs->type(1);
          ppui.objtogs->color((Fl_Color)96);
          { Fl_Button* o = new Fl_Button(6, 40, 30, 18, "g0");
            o->type(1);
            o->box(FL_DOWN_BOX);
            o->color((Fl_Color)38);
            o->selection_color(FL_FOREGROUND_COLOR);
            o->labelsize(12);
            o->labelcolor((Fl_Color)3);
            o->callback((Fl_Callback*)pp_objtog_cb);
          } // Fl_Button* o
          o->spacing(2);
          ppui.objtogs->end();
        } // Fl_Pack* ppui.objtogs
        o->end();
      } // Fl_Scroll_Thin* o
      { ppui.steprow = new Fl_Group(0, 70, 380, 49);
        ppui.steprow->color((Fl_Color)41);
        { ppui.step[0] = new Fl_Button(304, 74, 19, 20, "@#|<");
          ppui.step[0]->color(FL_GRAY0);
          ppui.step[0]->labelcolor((Fl_Color)3);
          ppui.step[0]->callback((Fl_Callback*)pp_step_cb, (void*)(-1));
        } // Fl_Button* ppui.step[0]
        { ppui.step[1] = new Fl_Button(325, 74, 19, 20, "@#>|");
          ppui.step[1]->color(FL_GRAY0);
          ppui.step[1]->labelcolor((Fl_Color)3);
          ppui.step[1]->callback((Fl_Callback*)pp_step_cb, (void*)(1));
        } // Fl_Button* ppui.step[1]
        { Fl_Float_Input* o = ppui.timestep = new Fl_Float_Input(12, 74, 108, 21, "T");
          ppui.timestep->type(1);
          ppui.timestep->color(FL_GRAY0);
          ppui.timestep->selection_color((Fl_Color)92);
          ppui.timestep->labelsize(13);
          ppui.timestep->labelcolor((Fl_Color)3);
          ppui.timestep->textsize(12);
          ppui.timestep->textcolor(FL_BACKGROUND2_COLOR);
          ppui.timestep->callback((Fl_Callback*)pp_timeinput_cb);
          o->cursor_color( o->textcolor() );
        } // Fl_Float_Input* ppui.timestep
        { ppui.jog = new Fl_Roller(182, 75, 118, 20);
          ppui.jog->type(1);
          ppui.jog->color((Fl_Color)48);
          ppui.jog->selection_color(FL_INACTIVE_COLOR);
          ppui.jog->labelcolor((Fl_Color)3);
          ppui.jog->minimum(-1e+08);
          ppui.jog->maximum(1e+08);
          ppui.jog->step(0.01);
          ppui.jog->callback((Fl_Callback*)pp_jog_cb);
        } // Fl_Roller* ppui.jog
        { ppui.settrip = new Fl_Button(120, 75, 27, 19, "trip");
          ppui.settrip->color(FL_FOREGROUND_COLOR);
          ppui.settrip->labelsize(10);
          ppui.settrip->labelcolor((Fl_Color)3);
          ppui.settrip->callback((Fl_Callback*)pp_settrip_cb);
        } // Fl_Button* ppui.settrip
        { ppui.backtrip = new Fl_Button(149, 75, 26, 19, "back");
          ppui.backtrip->color(FL_GRAY0);
          ppui.backtrip->labelsize(11);
          ppui.backtrip->labelcolor((Fl_Color)3);
          ppui.backtrip->callback((Fl_Callback*)pp_backtrip_cb);
        } // Fl_Button* ppui.backtrip
        { Fl_Float_Input* o = ppui.timebase = new Fl_Float_Input(12, 97, 137, 21, "+");
          ppui.timebase->type(1);
          ppui.timebase->color((Fl_Color)97);
          ppui.timebase->labelsize(13);
          ppui.timebase->labelcolor((Fl_Color)3);
          ppui.timebase->textsize(9);
          ppui.timebase->textcolor(FL_LIGHT2);
          ppui.timebase->callback((Fl_Callback*)pp_timebaseinput_cb);
          ppui.timebase->when(FL_WHEN_ENTER_KEY);
          o->cursor_color( o->textcolor() );
        } // Fl_Float_Input* ppui.timebase
        { ppui.stepspeed = new class Fl_Log_Slider(162, 97, 137, 20);
          ppui.stepspeed->type(5);
          ppui.stepspeed->box(FL_DOWN_BOX);
          ppui.stepspeed->color(FL_GRAY0);
          ppui.stepspeed->selection_color((Fl_Color)4);
          ppui.stepspeed->labeltype(FL_NORMAL_LABEL);
          ppui.stepspeed->labelfont(0);
          ppui.stepspeed->labelsize(14);
          ppui.stepspeed->labelcolor((Fl_Color)3);
          ppui.stepspeed->step(0.0001);
          ppui.stepspeed->textsize(9);
          ppui.stepspeed->textcolor((Fl_Color)3);
          ppui.stepspeed->callback((Fl_Callback*)pp_stepspeed_cb);
          ppui.stepspeed->align(Fl_Align(FL_ALIGN_BOTTOM));
          ppui.stepspeed->when(FL_WHEN_CHANGED);
        } // class Fl_Log_Slider* ppui.stepspeed
        { ppui.runstop[0] = new Fl_Button(304, 97, 20, 20, "@#<<");
          ppui.runstop[0]->type(1);
          ppui.runstop[0]->color(FL_GRAY0);
          ppui.runstop[0]->labelsize(12);
          ppui.runstop[0]->labelcolor((Fl_Color)3);
          ppui.runstop[0]->callback((Fl_Callback*)pp_run_cb, (void*)(-1));
        } // Fl_Button* ppui.runstop[0]
        { ppui.runstop[1] = new Fl_Button(325, 97, 20, 20, "@#>>");
          ppui.runstop[1]->type(1);
          ppui.runstop[1]->color(FL_GRAY0);
          ppui.runstop[1]->labelsize(12);
          ppui.runstop[1]->labelcolor((Fl_Color)3);
          ppui.runstop[1]->callback((Fl_Callback*)pp_run_cb, (void*)(1));
        } // Fl_Button* ppui.runstop[1]
        { ppui.feed = new Fl_Light_Button(352, 73, 20, 21, "feed");
          ppui.feed->color((Fl_Color)96);
          ppui.feed->labelsize(10);
          ppui.feed->labelcolor((Fl_Color)3);
          ppui.feed->callback((Fl_Callback*)pp_feed_cb);
          ppui.feed->align(Fl_Align(FL_ALIGN_BOTTOM_LEFT));
        } // Fl_Light_Button* ppui.feed
        ppui.steprow->end();
      } // Fl_Group* ppui.steprow
      { ppui.animrow = new Fl_Group(0, 121, 540, 21);
        { ppui.rdata = new Fl_Button(0, 122, 55, 20, "Path...");
          ppui.rdata->color(FL_GRAY0);
          ppui.rdata->labelsize(12);
          ppui.rdata->labelcolor((Fl_Color)3);
          ppui.rdata->callback((Fl_Callback*)pp_rdata_cb, (void*)(&ppui.st));
        } // Fl_Button* ppui.rdata
        { ppui.play = new Fl_Button(57, 122, 40, 20, "Play");
          ppui.play->type(1);
          ppui.play->color(FL_GRAY0);
          ppui.play->selection_color((Fl_Color)58);
          ppui.play->labelsize(12);
          ppui.play->labelcolor((Fl_Color)3);
          ppui.play->callback((Fl_Callback*)pp_play_cb, (void*)(&ppui.st));
        } // Fl_Button* ppui.play
        { Fl_Menu_Button* o = playmenu = new Fl_Menu_Button(57, 122, 40, 20, "Play Speed (Nf = every Nth frame)");
          playmenu->type(4);
          playmenu->callback((Fl_Callback*)cb_playmenu);
          o->add("play 1|play .5|play .25|play 2|play 5|play 1f|play 2f|play 5f|play 10f");
        } // Fl_Menu_Button* playmenu
        { ppui.playframe = new Fl_Counter(122, 122, 80, 20);
          ppui.playframe->color(FL_GRAY0);
          ppui.playframe->selection_color((Fl_Color)1);
          ppui.playframe->labelcolor((Fl_Color)3);
          ppui.playframe->minimum(0);
          ppui.playframe->maximum(3000);
          ppui.playframe->step(1);
          ppui.playframe->textsize(11);
          ppui.playframe->callback((Fl_Callback*)pp_playframe_cb, (void*)(&ppui.st));
          ppui.playframe->when(FL_WHEN_RELEASE);
        } // Fl_Counter* ppui.playframe
        { ppui.playtime = new Fl_Value_Slider(202, 122, 337, 20);
          ppui.playtime->type(5);
          ppui.playtime->color(FL_GRAY0);
          ppui.playtime->selection_color((Fl_Color)4);
          ppui.playtime->labelcolor((Fl_Color)3);
          ppui.playtime->maximum(100);
          ppui.playtime->step(0);
          ppui.playtime->textcolor((Fl_Color)3);
          ppui.playtime->callback((Fl_Callback*)pp_playtime_cb, (void*)(&ppui.st));
          Fl_Group::current()->resizable(ppui.playtime);
        } // Fl_Value_Slider* ppui.playtime
        { editbtn = new Fl_Button(97, 121, 25, 20, "att");
          editbtn->color((Fl_Color)33);
          editbtn->selection_color((Fl_Color)33);
          editbtn->labelsize(12);
          editbtn->labelcolor((Fl_Color)3);
        } // Fl_Button* editbtn
        ppui.animrow->end();
      } // Fl_Group* ppui.animrow
      { ppui.maintile = new Fl_Tile(0, 142, 540, 327);
        ppui.maintile->color((Fl_Color)139);
        { ppui.cmdhist = new Hist(0, 142, 540, 75);
          ppui.cmdhist->box(FL_DOWN_BOX);
          ppui.cmdhist->color((Fl_Color)96);
          ppui.cmdhist->selection_color(FL_BACKGROUND_COLOR);
          ppui.cmdhist->labeltype(FL_NORMAL_LABEL);
          ppui.cmdhist->labelfont(0);
          ppui.cmdhist->labelsize(14);
          ppui.cmdhist->labelcolor(FL_FOREGROUND_COLOR);
          ppui.cmdhist->align(Fl_Align(FL_ALIGN_TOP));
          ppui.cmdhist->when(FL_WHEN_RELEASE);
          { HistBrowser* o = new HistBrowser(0, 142, 540, 50);
            o->type(3);
            o->box(FL_NO_BOX);
            o->color(FL_FOREGROUND_COLOR);
            o->selection_color((Fl_Color)9);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(12);
            o->labelcolor(FL_FOREGROUND_COLOR);
            o->textsize(12);
            o->textcolor((Fl_Color)3);
            o->align(Fl_Align(FL_ALIGN_BOTTOM));
            o->when(FL_WHEN_RELEASE_ALWAYS);
            Fl_Group::current()->resizable(o);
            o->scrollbar.align( FL_ALIGN_LEFT );
            o->scrollbar_width( 8 );
            o->hist(ppui.cmdhist);
          } // HistBrowser* o
          { Fl_Group* o = new Fl_Group(0, 192, 540, 25);
            { Fl_Box* o = new Fl_Box(0, 192, 30, 25, "Cmd:");
              o->labelsize(12);
              o->labelcolor((Fl_Color)3);
            } // Fl_Box* o
            { HistInput* o = ppui.cmd = new HistInput(30, 192, 510, 25);
              ppui.cmd->box(FL_DOWN_BOX);
              ppui.cmd->color((Fl_Color)38);
              ppui.cmd->selection_color((Fl_Color)9);
              ppui.cmd->labeltype(FL_NORMAL_LABEL);
              ppui.cmd->labelfont(1);
              ppui.cmd->labelsize(10);
              ppui.cmd->labelcolor((Fl_Color)3);
              ppui.cmd->textcolor((Fl_Color)55);
              ppui.cmd->callback((Fl_Callback*)pp_cmd_cb);
              ppui.cmd->align(Fl_Align(FL_ALIGN_LEFT));
              ppui.cmd->when(FL_WHEN_ENTER_KEY_ALWAYS);
              Fl_Group::current()->resizable(ppui.cmd);
              o->cursor_color( o->textcolor() );
              o->hist( ppui.cmdhist );
            } // HistInput* ppui.cmd
            o->end();
          } // Fl_Group* o
          ppui.cmdhist->end();
        } // Hist* ppui.cmdhist
        { Fl_Box* o = new Fl_Box(0, 202, 540, 267, "tilelimiter");
          o->hide();
          Fl_Group::current()->resizable(o);
        } // Fl_Box* o
        { Fl_Group* o = new Fl_Group(0, 217, 540, 252);
          o->box(FL_DOWN_BOX);
          { Fl_Gview* o = ppui.view = new Fl_Gview(0, 217, 540, 249);
            ppui.view->box(FL_NO_BOX);
            ppui.view->color(FL_BACKGROUND_COLOR);
            ppui.view->selection_color(FL_BACKGROUND_COLOR);
            ppui.view->labeltype(FL_NORMAL_LABEL);
            ppui.view->labelfont(0);
            ppui.view->labelsize(14);
            ppui.view->labelcolor(FL_FOREGROUND_COLOR);
            ppui.view->align(Fl_Align(FL_ALIGN_CENTER));
            ppui.view->when(FL_WHEN_RELEASE);
            o->cursor(FL_CURSOR_CROSS);
          } // Fl_Gview* ppui.view
          o->end();
        } // Fl_Group* o
        ppui.maintile->end();
        Fl_Group::current()->resizable(ppui.maintile);
      } // Fl_Tile* ppui.maintile
      o->spacing(0);
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Pack* o
    o->size_range(101,130);
    ppui.mainwin->end();
  } // Fl_Double_Window* ppui.mainwin
  { Fl_Double_Window* o = ppui.hrdiagwin = new Fl_Double_Window(280, 230);
    { Fl_Plot* o = ppui.hrdiag = new Fl_Plot(0, 0, 284, 234);
      ppui.hrdiag->box(FL_DOWN_BOX);
      ppui.hrdiag->color(FL_FOREGROUND_COLOR);
      ppui.hrdiag->selection_color(FL_BACKGROUND_COLOR);
      ppui.hrdiag->labeltype(FL_NORMAL_LABEL);
      ppui.hrdiag->labelfont(0);
      ppui.hrdiag->labelsize(14);
      ppui.hrdiag->labelcolor(FL_FOREGROUND_COLOR);
      ppui.hrdiag->align(Fl_Align(FL_ALIGN_TOP));
      ppui.hrdiag->when(FL_WHEN_RELEASE);
      o->cursor(FL_CURSOR_CROSS);
      ppui.hrdiag->end();
      Fl_Group::current()->resizable(ppui.hrdiag);
    } // Fl_Plot* ppui.hrdiag
    o->hide();
    ppui.hrdiagwin->end();
  } // Fl_Double_Window* ppui.hrdiagwin
  return ppui.hrdiagwin;
}
